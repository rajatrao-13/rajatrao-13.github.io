<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-16T18:33:06+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">rajatrao13</title><subtitle>devlopr-jekyll is a Jekyll Theme Built For Developers
</subtitle><author><name>Rajat Rao</name></author><entry><title type="html">Mobile Security</title><link href="http://localhost:4000/guides/tutorials/2020/06/10/Mobile-Security-part-1/" rel="alternate" type="text/html" title="Mobile Security" /><published>2020-06-10T14:35:23+05:30</published><updated>2020-06-10T14:35:23+05:30</updated><id>http://localhost:4000/guides/tutorials/2020/06/10/Mobile-Security-part-1</id><content type="html" xml:base="http://localhost:4000/guides/tutorials/2020/06/10/Mobile-Security-part-1/">&lt;p&gt;As security audit of web application are performed for multiple organization, a draw of interest can be made in Mobile applications as well.&lt;/p&gt;

&lt;p&gt;The primary objective for a mobile application penetration test is to identify exploitable vulnerabilities in code, system, network, application, databases, Api’s etc before hackers are able to discover and exploit them. Application penetration testing will reveal real-world opportunities for hackers to be able to compromise application and databases in such a way that allows for unauthorized access to sensitive data or even take-over application for malicious/non-business purposes.&lt;/p&gt;

&lt;p&gt;Android Penetration testing can be implemented in any organization:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1)Static:&lt;/code&gt; Checks with respect to code levels will be performed&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2)Network:&lt;/code&gt; Intercepting the request sent by the android application and interaction between the application and server is audited.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;3)Interactive:&lt;/code&gt; While the applications provide its service, they tend to store a lot of confidential data in the respective mobile device itselfdynamically. An audit of the internal storage of the device is performed.&lt;/p&gt;

&lt;p&gt;The Mobile Security Series will be divided into the following chapters:&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;a href=&quot;/../chapters/Mobile-chapter-1.md&quot;&gt;Chapter 1: Android Fundamentals (Basics)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;a href=&quot;&quot;&gt;Chapter 2: Static Analysis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;a href=&quot;&quot;&gt;Chapter 3: Dynamic Analysis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;a href=&quot;&quot;&gt;Chapter 4: Interactive Analysis&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundler&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Travis will build the site from gh-pages branch&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# and deploy the content to master branch&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# use gh-pages branch to serve for github pages&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# master branch will be used for deployment&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gh-pages&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JEKYLL_ENV=production bundle exec jekyll build --destination site&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# You need to generate a Personal Access Token&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# https://github.com/settings/tokens&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Add this token in environment variable GITHUB_TOKEN in Travis CI repo settings&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pages&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;local-dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./site&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target-branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy@travis-ci.org&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment Bot&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;skip-cleanup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;github-token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$GITHUB_TOKEN&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;keep-history&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gh-pages&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Generate your secure token with the travis gem:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# get Github token from your Travis CI profile page&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem install travis&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;travis encrypt 'GIT_NAME=&quot;YOUR_USERNAME&quot; GIT_EMAIL=&quot;YOUR_EMAIL&quot; GH_TOKEN=YOUR_TOKEN' --add env.global --com&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# env:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   global:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     secure: Example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All we are doing is telling Travis to pick up files from our &lt;strong&gt;gh-pages&lt;/strong&gt; branch and push the build files to &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;

&lt;h5 id=&quot;generate-a-new-github-personal-access-token&quot;&gt;Generate a New Github Personal Access Token&lt;/h5&gt;

&lt;p&gt;We need this token as a Environment Variable in Travis. For Travis can automatically login as you, and finish its job of building your site and pushing it to your repo’s master branch.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Github Generate a New Token&lt;/a&gt; Page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/d1.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Create a new Access Token&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/d2.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;configure-travis&quot;&gt;Configure Travis&lt;/h5&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://travis.org&quot;&gt;Travis&lt;/a&gt; and Toggle the repository access to use Travis&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/d3.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the repository settings page and Add Environment Variable ‘GITHUB_TOKEN’
&lt;img src=&quot;/assets/img/posts/d4.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;push-your-changes-to-github&quot;&gt;Push your changes to Github&lt;/h5&gt;

&lt;p&gt;Commit your local changes in gh-pages branch&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;added new post&quot;&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin gh-pages&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After push, Travis will automatically run a build process and deploy your blog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/d5.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can visit your site at https://yourusername.github.io&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/d6.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Done ! Enjoy your brand new devlopr-jekyll blog. You can visit the site at https://yourusername.github.io&lt;/p&gt;</content><author><name>Rajat Rao</name></author><category term="[&quot;guides&quot;, &quot;tutorials&quot;]" /><summary type="html">As security audit of web application are performed for multiple organization, a draw of interest can be made in Mobile applications as well.</summary></entry><entry><title type="html">Mobile Security</title><link href="http://localhost:4000/hackthebox/2020/06/10/Mobile-Security/" rel="alternate" type="text/html" title="Mobile Security" /><published>2020-06-10T14:35:23+05:30</published><updated>2020-06-10T14:35:23+05:30</updated><id>http://localhost:4000/hackthebox/2020/06/10/Mobile-Security</id><content type="html" xml:base="http://localhost:4000/hackthebox/2020/06/10/Mobile-Security/">&lt;style&gt;
* {
  box-sizing: border-box;
}

.column {
  float: left;
  width: 33.33%;
  padding: 5px;
}

/* Clearfix (clear floats) */
.row::after {
  content: &quot;&quot;;
  clear: both;
  display: table;
}
&lt;/style&gt;

&lt;p&gt;As security audit of web application are performed for multiple organization, a draw of interest can be made in Mobile applications as well.&lt;/p&gt;

&lt;p&gt;The primary objective for a mobile application penetration test is to identify exploitable vulnerabilities in code, system, network, application, databases, Api’s etc before hackers are able to discover and exploit them. Application penetration testing will reveal real-world opportunities for hackers to be able to compromise application and databases in such a way that allows for unauthorized access to sensitive data or even take-over application for malicious/non-business purposes.&lt;/p&gt;

&lt;p&gt;Android Penetration testing can be implemented in any organization:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1)Static:&lt;/code&gt; Checks with respect to code levels will be performed&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2)Network:&lt;/code&gt; Intercepting the request sent by the android application and interaction between the application and server is audited.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;3)Interactive:&lt;/code&gt; While the applications provide its service, they tend to store a lot of confidential data in the respective mobile device itselfdynamically. An audit of the internal storage of the device is performed.&lt;/p&gt;

&lt;p&gt;The Mobile Security Series will be divided into the following chapters:&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;a href=&quot;#fundamentals&quot;&gt;Chapter 1: Android Fundamentals (Basics)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;a href=&quot;&quot;&gt;Chapter 2: Static Analysis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;a href=&quot;&quot;&gt;Chapter 3: Dynamic Analysis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;a href=&quot;&quot;&gt;Chapter 4: Interactive Analysis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;Chapter 2: Setup Mobile Testing Platform  &lt;/h2&gt;

&lt;p&gt;Setting up an environment for any security assessment is a must. For Android Security, it is suggested to be dependent more on Kali Linux/Tamer operating system. &lt;b&gt;Kali Linux&lt;/b&gt; is an advanced penetration testing Linux distribution used for Penetration Testing, Ethical Hacking and network security assessments.&lt;b&gt;Android Tamer&lt;/b&gt; is a virtual/live platform for Android Security professionals where all the tools are inculcated within the OS.&lt;/p&gt;

&lt;p&gt;The very first step is to install Virtual Kali Linux/Android Tamer on Vmware. Following is the list of useful URLs for downloads:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;VMware&lt;/b&gt;: &lt;a href=&quot;https://www.vmware.com/in/products/workstation-player/workstation-player-evaluation.html&quot;&gt;https://www.vmware.com/in/products/workstation-player/workstation-player-evaluation.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Kali Linux&lt;/b&gt;: &lt;a href=&quot;https://www.kali.org/downloads/&quot;&gt;https://www.kali.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Android Tamer&lt;/b&gt;: &lt;a href=&quot;https://androidtamer.com/tamer4-release&quot;&gt;https://androidtamer.com/tamer4-release&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For newbies into cyber security, we’ll be creating content for installation steps for &lt;b&gt;VMWare&lt;/b&gt; and &lt;b&gt;virtual machines&lt;/b&gt; (.iso and .ova)&lt;/p&gt;

&lt;p&gt;For assessing Mobile application, we need a dedicated android testing device to perform assessments. However, the same can be performed by creating a virtual Android environment with the help of a tool named Genymotion. It is a Cross-platform Android Emulator for developers &amp;amp; QA engineers. It is dependent on VirtualBox. Following is the list of URL for downloads-&lt;/p&gt;

&lt;p&gt;&lt;b&gt;VirtualBox&lt;/b&gt;: &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Genymotion&lt;/b&gt;: &lt;a href=&quot;https://www.genymotion.com/fun-zone/&quot;&gt;https://www.genymotion.com/fun-zone/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;2.1 || Genymotion&lt;/h3&gt;

&lt;p&gt;–&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Start Genymotion&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Mobile_Security/1.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Virtual Device&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Mobile_Security/2.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Select Google Pixel XL with API &amp;gt;=6.0 and click Next&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Mobile_Security/3.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Install the selected emulator&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Mobile_Security/4.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Mobile_Security/5.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;2.2 || Required tools&lt;/h3&gt;

&lt;p&gt;Once genymotion is installed, the next step for android security assessments is to setup following list of tools in &lt;b&gt;Kali Linux&lt;/b&gt;:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Mobsf (Docker)&lt;/b&gt;: &lt;a href=&quot;https://github.com/MobSF/Mobile-Security-Framework-MobSF&quot;&gt;https://github.com/MobSF/Mobile-Security-Framework-MobSF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Drozer&lt;/b&gt;: &lt;a href=&quot;https://github.com/FSecureLABS/drozer/releases&quot;&gt;https://github.com/FSecureLABS/drozer/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Superanalyzer&lt;/b&gt;: &lt;a href=&quot;https://github.com/FSecureLABS/drozer/releases&quot;&gt;https://github.com/FSecureLABS/drozer/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;Chapter 3: Static Analysis  &lt;/h2&gt;

&lt;p&gt;Static Application Security Testing is a set of technologies designed to analyze the application source code that are indicative of security vulnerabilities. Now as required tools are installed, we can start with security assessment of Android Applications/&lt;/p&gt;

&lt;h3&gt;3.1 || Mobsf (Docker)&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;Mobile Security Framework (MobSF)&lt;/b&gt; is an automated, all-in-one mobile application (Android/iOS/Windows) pen-testing, malware-analysis and security assessment framework capable of performing static and dynamic analysis.&lt;/p&gt;

&lt;p&gt;In this section of &lt;b&gt;Mobsf&lt;/b&gt;, we’ll be focusing more on static analysis.&lt;/p&gt;

&lt;p&gt;–&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Start mobsf via Docker&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ cd Mobile-Security-Framework-MobSF&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ docker build -t mobsf .&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ docker run -it -p 8000:8000 mobsf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;–&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Upload and Scan APK&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Mobile_Security/6.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Mobile_Security/7.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;3.2 || Superanalyzer &lt;/h3&gt;

&lt;p&gt;–&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Run Superanalyzer against APK&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ super-analyzer -v goatdroid.apk&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output of the super-anaylzer is stored in the form of HTML and can view defects found with respect to the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Mobile_Security/8.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;3.3 || d2j-dex2jar &amp;amp; jd-gui &lt;/h3&gt;

&lt;p&gt;&lt;b&gt;d2j-dex2jar&lt;/b&gt; tool helps one to reverse engineer the apk to jar version of it. The jar version helps to displays the code and can be examined for security purposes.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$d2j-dex2jar goatdroid.apk&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$jd-gui → select jar file of goatdroid apk&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/posts/Mobile_Security/9.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;Chapter 4: Network Analysis &lt;/h2&gt;

&lt;p&gt;Network analysis deals with communication of application with the server providing data. Here, analysis is done similarly the way analysis of web application is done by setting a proxy and intercepting every request to &lt;b&gt;Burpsuite&lt;/b&gt;.&lt;/p&gt;

&lt;h3&gt;4.1 || Setup Proxy in Mobile &lt;/h3&gt;

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;column&quot;&gt;
    &lt;img src=&quot;/assets/img/posts/Mobile_Security/10.png&quot; alt=&quot;Snow&quot; style=&quot;width:100%&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;column&quot;&gt;
    &lt;img src=&quot;/assets/img/posts/Mobile_Security/11.png&quot; alt=&quot;Forest&quot; style=&quot;width:100%&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;column&quot;&gt;
    &lt;img src=&quot;/assets/img/posts/Mobile_Security/12.png&quot; alt=&quot;Mountains&quot; style=&quot;width:100%&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;</content><author><name>Rajat Rao</name></author><category term="[&quot;HackTheBox&quot;]" /><summary type="html"></summary></entry><entry><title type="html">HackTheBox Remote</title><link href="http://localhost:4000/jekyll/2020/06/05/HackTheBox-Remote/" rel="alternate" type="text/html" title="HackTheBox Remote" /><published>2020-06-05T15:22:20+05:30</published><updated>2020-06-05T15:22:20+05:30</updated><id>http://localhost:4000/jekyll/2020/06/05/HackTheBox-Remote</id><content type="html" xml:base="http://localhost:4000/jekyll/2020/06/05/HackTheBox-Remote/">&lt;h1 id=&quot;hello-world-&quot;&gt;Hello World ,&lt;/h1&gt;

&lt;p&gt;This is a &lt;strong&gt;&lt;em&gt;Test Post&lt;/em&gt;&lt;/strong&gt; that is created by &lt;strong&gt;Netlify&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;h1&amp;gt; Test Code &amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Rajat Rao</name></author><category term="jekyll" /><summary type="html">Hello World ,</summary></entry><entry><title type="html">HackTheBox Remote</title><link href="http://localhost:4000/guides/2020/06/04/using-siteleaf/" rel="alternate" type="text/html" title="HackTheBox Remote" /><published>2020-06-04T14:35:23+05:30</published><updated>2020-06-04T14:35:23+05:30</updated><id>http://localhost:4000/guides/2020/06/04/using-siteleaf</id><content type="html" xml:base="http://localhost:4000/guides/2020/06/04/using-siteleaf/">&lt;p&gt;Hey There, Today we will see on how to unlock the superpowers of our devlopr-jekyll blog. We will be using Siteleaf CMS to modify content of our blog.&lt;/p&gt;

&lt;p&gt;Note : If you have not created your blog yet. Create Your Blog , then comeback later&lt;/p&gt;

&lt;p&gt;Login to &lt;a href=&quot;https://www.siteleaf.com/&quot;&gt;Siteleaf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/siteleaf/1.png&quot; alt=&quot;Using Siteleaf &quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select Connect with Github, connect existing repository:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/siteleaf/2.png&quot; alt=&quot;Using Siteleaf &quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the repository of your devlopr-jekyll blog:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/siteleaf/3.png&quot; alt=&quot;Using Siteleaf &quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Connect and Create Site:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/siteleaf/4.png&quot; alt=&quot;Using Siteleaf &quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After successful import, You will be redirected to manage dashboard :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/siteleaf/5.png&quot; alt=&quot;Using Siteleaf &quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But before making any changes to our blog, we need to change our current Siteleaf membership plan to Free Plan (For Developers)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/siteleaf/6.png&quot; alt=&quot;Using Siteleaf &quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select Free Plan :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/siteleaf/8.png&quot; alt=&quot;Using Siteleaf &quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congrats ! Your New Admin Panel for your devlopr-jekyll blog is ready to make any changes to your blog :D&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/siteleaf/9.png&quot; alt=&quot;Using Siteleaf &quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;</content><author><name>Sujay Kundu</name></author><category term="guides" /><summary type="html">Hey There, Today we will see on how to unlock the superpowers of our devlopr-jekyll blog. We will be using Siteleaf CMS to modify content of our blog.</summary></entry><entry><title type="html">Netlify CMS created this Article</title><link href="http://localhost:4000/jekyll/2020/05/23/netlify-cms-created-this-article/" rel="alternate" type="text/html" title="Netlify CMS created this Article" /><published>2020-05-23T15:22:20+05:30</published><updated>2020-05-23T15:22:20+05:30</updated><id>http://localhost:4000/jekyll/2020/05/23/netlify-cms-created-this-article</id><content type="html" xml:base="http://localhost:4000/jekyll/2020/05/23/netlify-cms-created-this-article/">&lt;h1 id=&quot;hello-world-&quot;&gt;Hello World ,&lt;/h1&gt;

&lt;p&gt;This is a &lt;strong&gt;&lt;em&gt;Test Post&lt;/em&gt;&lt;/strong&gt; that is created by &lt;strong&gt;Netlify&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;h1&amp;gt; Test Code &amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>John Doe</name></author><category term="jekyll" /><summary type="html">Hello World ,</summary></entry><entry><title type="html">Welcome to devlopr !</title><link href="http://localhost:4000/jekyll/2019/05/22/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to devlopr !" /><published>2019-05-22T14:35:23+05:30</published><updated>2019-05-22T14:35:23+05:30</updated><id>http://localhost:4000/jekyll/2019/05/22/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/2019/05/22/welcome-to-jekyll/">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>John Doe</name></author><category term="jekyll" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">How to deploy devlopr-jekyll Blog using Github Pages and Travis</title><link href="http://localhost:4000/guides/tutorials/2019/05/21/deploy-blog-using-devlopr-jekyll-and-github-pages/" rel="alternate" type="text/html" title="How to deploy devlopr-jekyll Blog using Github Pages and Travis" /><published>2019-05-21T14:35:23+05:30</published><updated>2019-05-21T14:35:23+05:30</updated><id>http://localhost:4000/guides/tutorials/2019/05/21/deploy-blog-using-devlopr-jekyll-and-github-pages</id><content type="html" xml:base="http://localhost:4000/guides/tutorials/2019/05/21/deploy-blog-using-devlopr-jekyll-and-github-pages/">&lt;p&gt;This guide assumes that you already have created your blog and tested locally. If not please follow this tutorial : &lt;a href=&quot;https://devlopr.netlify.com/guides/2017/11/19/build-a-blog-using-devlopr-jekyll&quot;&gt;Create a Blog using devlopr jekyll&lt;/a&gt;. Then come back and proceed with the deployment process.&lt;/p&gt;

&lt;p&gt;In this Guide, we are using Github Pages and Travis CI for deploying our blog. Sometimes Github Pages does not support external third party plugins. In that case we deploy our blog using Travis CI, it automatically builds our website and pushes the static files of the site to a deployment branch. Which then Github Pages uses to render the site. Hope you get it :P !&lt;/p&gt;

&lt;p&gt;We might need to instruct Travis CI to follow deployment instructions. Copy the below content in &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundler&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Travis will build the site from gh-pages branch&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# and deploy the content to master branch&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# use gh-pages branch to serve for github pages&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# master branch will be used for deployment&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gh-pages&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JEKYLL_ENV=production bundle exec jekyll build --destination site&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# You need to generate a Personal Access Token&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# https://github.com/settings/tokens&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Add this token in environment variable GITHUB_TOKEN in Travis CI repo settings&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pages&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;local-dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./site&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target-branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy@travis-ci.org&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment Bot&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;skip-cleanup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;github-token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$GITHUB_TOKEN&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;keep-history&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gh-pages&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Generate your secure token with the travis gem:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# get Github token from your Travis CI profile page&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;gem install travis&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;travis encrypt 'GIT_NAME=&quot;YOUR_USERNAME&quot; GIT_EMAIL=&quot;YOUR_EMAIL&quot; GH_TOKEN=YOUR_TOKEN' --add env.global --com&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# env:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   global:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     secure: Example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All we are doing is telling Travis to pick up files from our &lt;strong&gt;gh-pages&lt;/strong&gt; branch and push the build files to &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;

&lt;h5 id=&quot;generate-a-new-github-personal-access-token&quot;&gt;Generate a New Github Personal Access Token&lt;/h5&gt;

&lt;p&gt;We need this token as a Environment Variable in Travis. For Travis can automatically login as you, and finish its job of building your site and pushing it to your repo’s master branch.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Github Generate a New Token&lt;/a&gt; Page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/d1.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Create a new Access Token&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/d2.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;configure-travis&quot;&gt;Configure Travis&lt;/h5&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://travis.org&quot;&gt;Travis&lt;/a&gt; and Toggle the repository access to use Travis&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/d3.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go to the repository settings page and Add Environment Variable ‘GITHUB_TOKEN’
&lt;img src=&quot;/assets/img/posts/d4.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;push-your-changes-to-github&quot;&gt;Push your changes to Github&lt;/h5&gt;

&lt;p&gt;Commit your local changes in gh-pages branch&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;added new post&quot;&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin gh-pages&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After push, Travis will automatically run a build process and deploy your blog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/d5.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can visit your site at https://yourusername.github.io&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/d6.png&quot; alt=&quot;deploy using travis&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Done ! Enjoy your brand new devlopr-jekyll blog. You can visit the site at https://yourusername.github.io&lt;/p&gt;</content><author><name>Sujay Kundu</name></author><category term="[&quot;guides&quot;, &quot;tutorials&quot;]" /><summary type="html">This guide assumes that you already have created your blog and tested locally. If not please follow this tutorial : Create a Blog using devlopr jekyll. Then come back and proceed with the deployment process.</summary></entry></feed>