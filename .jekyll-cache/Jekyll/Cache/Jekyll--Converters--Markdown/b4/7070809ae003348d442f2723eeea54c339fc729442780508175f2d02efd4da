I"`/<style>
* {
  box-sizing: border-box;
}

.column {
  float: left;
  width: 33.33%;
  padding: 5px;
}

/* Clearfix (clear floats) */
row::after {
  content: "";
  clear: both;
  display: table;
}
</style>

<p>As security audit of web application are performed for multiple organization, a draw of interest can be made in Mobile applications as well.</p>

<p>The primary objective for a mobile application penetration test is to identify exploitable vulnerabilities in code, system, network, application, databases, Api’s etc before hackers are able to discover and exploit them. Application penetration testing will reveal real-world opportunities for hackers to be able to compromise application and databases in such a way that allows for unauthorized access to sensitive data or even take-over application for malicious/non-business purposes.</p>

<p>Android Penetration testing can be implemented in any organization:</p>

<p><code class="highlighter-rouge">1)Static:</code> Checks with respect to code levels will be performed</p>

<p><code class="highlighter-rouge">2)Network:</code> Intercepting the request sent by the android application and interaction between the application and server is audited.</p>

<p><code class="highlighter-rouge">3)Interactive:</code> While the applications provide its service, they tend to store a lot of confidential data in the respective mobile device itselfdynamically. An audit of the internal storage of the device is performed.</p>

<p>The Mobile Security Series will be divided into the following chapters:</p>

<ul>
  <li>
    <p><a href="https://rajatrao-13.github.io">Chapter 1: Android Fundamentals (Basics)</a></p>
  </li>
  <li>
    <p><a href="">Chapter 2: Static</a></p>
  </li>
  <li>
    <p><a href="">Chapter 3: Dynamic Analysis</a></p>
  </li>
  <li>
    <p><a href="">Chapter 4: Interactive Analysis</a></p>
  </li>
</ul>

<p> </p>

<h2>Chapter 2: Setup Mobile Testing Platform  </h2>

<p>Setting up an environment for any security assessment is a must. For Android Security, it is suggested to be dependent more on Kali Linux/Tamer operating system. <b>Kali Linux</b> is an advanced penetration testing Linux distribution used for Penetration Testing, Ethical Hacking and network security assessments.<b>Android Tamer</b> is a virtual/live platform for Android Security professionals where all the tools are inculcated within the OS.</p>

<p>The very first step is to install Virtual Kali Linux/Android Tamer on Vmware. Following is the list of useful URLs for downloads:</p>

<p><b>VMware</b>: <a href="https://www.vmware.com/in/products/workstation-player/workstation-player-evaluation.html">https://www.vmware.com/in/products/workstation-player/workstation-player-evaluation.html</a></p>

<p><b>Kali Linux</b>: <a href="https://www.kali.org/downloads/">https://www.kali.org/downloads/</a></p>

<p><b>Android Tamer</b>: <a href="https://androidtamer.com/tamer4-release">https://androidtamer.com/tamer4-release</a></p>

<p>For newbies into cyber security, we’ll be creating content for installation steps for <b>VMWare</b> and <b>virtual machines</b> (.iso and .ova)</p>

<p>For assessing Mobile application, we need a dedicated android testing device to perform assessments. However, the same can be performed by creating a virtual Android environment with the help of a tool named Genymotion. It is a Cross-platform Android Emulator for developers &amp; QA engineers. It is dependent on VirtualBox. Following is the list of URL for downloads-</p>

<p><b>VirtualBox</b>: <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p>

<p><b>Genymotion</b>: <a href="https://www.genymotion.com/fun-zone/">https://www.genymotion.com/fun-zone/</a></p>

<p> </p>

<h3>2.1 || Genymotion</h3>

<p>–&gt; <code class="highlighter-rouge">Start Genymotion</code></p>

<p><img src="/assets/img/posts/Mobile_Security/1.png" alt="deploy using travis" class="img-fluid" /></p>

<p>–&gt; <code class="highlighter-rouge">Add Virtual Device</code></p>

<p><img src="/assets/img/posts/Mobile_Security/2.png" alt="deploy using travis" class="img-fluid" /></p>

<p>–&gt; <code class="highlighter-rouge">Select Google Pixel XL with API &gt;=6.0 and click Next</code></p>

<p><img src="/assets/img/posts/Mobile_Security/3.png" alt="deploy using travis" class="img-fluid" /></p>

<p>–&gt; <code class="highlighter-rouge">Install the selected emulator</code></p>

<p><img src="/assets/img/posts/Mobile_Security/4.png" alt="deploy using travis" class="img-fluid" /></p>

<p><img src="/assets/img/posts/Mobile_Security/5.png" alt="deploy using travis" class="img-fluid" /></p>

<p> </p>

<h3>2.2 || Required tools</h3>

<p>Once genymotion is installed, the next step for android security assessments is to setup following list of tools in <b>Kali Linux</b>:</p>

<p><b>Mobsf (Docker)</b>: <a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">https://github.com/MobSF/Mobile-Security-Framework-MobSF</a></p>

<p><b>Drozer</b>: <a href="https://github.com/FSecureLABS/drozer/releases">https://github.com/FSecureLABS/drozer/releases</a></p>

<p><b>Superanalyzer</b>: <a href="https://github.com/FSecureLABS/drozer/releases">https://github.com/FSecureLABS/drozer/releases</a></p>

<p> </p>

<h2>Chapter 3: Static Analysis  </h2>

<p>Static Application Security Testing is a set of technologies designed to analyze the application source code that are indicative of security vulnerabilities. Now as required tools are installed, we can start with security assessment of Android Applications/</p>

<h3>3.1 || Mobsf (Docker)</h3>

<p><b>Mobile Security Framework (MobSF)</b> is an automated, all-in-one mobile application (Android/iOS/Windows) pen-testing, malware-analysis and security assessment framework capable of performing static and dynamic analysis.</p>

<p>In this section of <b>Mobsf</b>, we’ll be focusing more on static analysis.</p>

<p>–&gt; <code class="highlighter-rouge">Start mobsf via Docker</code></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">$ git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git</span>
<span class="s">$ cd Mobile-Security-Framework-MobSF</span>
<span class="s">$ docker build -t mobsf .</span>
<span class="s">$ docker run -it -p 8000:8000 mobsf</span>
</code></pre></div></div>
<p>–&gt; <code class="highlighter-rouge">Upload and Scan APK</code></p>

<p><img src="/assets/img/posts/Mobile_Security/6.png" alt="deploy using travis" class="img-fluid" /></p>

<p><img src="/assets/img/posts/Mobile_Security/7.png" alt="deploy using travis" class="img-fluid" /></p>

<p> </p>

<h3>3.2 || Superanalyzer </h3>

<p>–&gt; <code class="highlighter-rouge">Run Superanalyzer against APK</code></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">$ super-analyzer -v goatdroid.apk</span>
</code></pre></div></div>
<p>The output of the super-anaylzer is stored in the form of HTML and can view defects found with respect to the application.</p>

<p><img src="/assets/img/posts/Mobile_Security/8.png" alt="deploy using travis" class="img-fluid" /></p>

<p> </p>

<h3>3.3 || d2j-dex2jar &amp; jd-gui </h3>

<p><b>d2j-dex2jar</b> tool helps one to reverse engineer the apk to jar version of it. The jar version helps to displays the code and can be examined for security purposes.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">$d2j-dex2jar goatdroid.apk</span>
<span class="s">$jd-gui → select jar file of goatdroid apk</span>
</code></pre></div></div>
<p><img src="/assets/img/posts/Mobile_Security/9.png" alt="deploy using travis" class="img-fluid" /></p>

<p> </p>

<h2>Chapter 4: Network Analysis </h2>

<p>Network analysis deals with communication of application with the server providing data. Here, analysis is done similarly the way analysis of web application is done by setting a proxy and intercepting every request to <b>Burpsuite</b>.</p>

<h3>4.1 || Setup Proxy in Mobile </h3>

<div class="row">
  <div class="column">
    <img src="/assets/img/posts/Mobile_Security/10.png" alt="Snow" style="width:100%" />
    <figcaption style="text-align: center;">Fig.1 </figcaption>

  </div>
  <div class="column">
    <img src="/assets/img/posts/Mobile_Security/11.png" alt="Forest" style="width:100%" />
    <figcaption style="text-align: center;">Fig.2 </figcaption>
  </div>
  <div class="column">
    <img src="/assets/img/posts/Mobile_Security/12.png" alt="Mountains" style="width:100%" />
    <figcaption style="text-align: center;">Fig.3 </figcaption>
  </div>
</div>

<p> </p>

<h3>4.2 || SSL Pinning and Root Detection Bypass </h3>

<p>Here, SSL Pinning allows the application to only trust the valid or pre-definedcertificate or Public Key. The application developer uses SSL Pinning technique as an additional layer for application traffic.</p>

<p>Below we are going to discuss about steps to bypass SSL Pinning.</p>

<p>–&gt; <code class="highlighter-rouge">Install Frida</code></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">$ pip3 install frida</span>
<span class="s">$ pip3 install objection</span>
<span class="s">$ pip3 install frida-tools</span>
</code></pre></div></div>
<p>Download the fridascript.js script for hooking from the following link:<a href="https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/">https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/</a></p>

<p>–&gt; <code class="highlighter-rouge">Connect Device to ADB</code></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">$ adb connect 192.18.0.105:5555</span>
<span class="s">$ adb devices (To check connected devices)</span>
</code></pre></div></div>
<p>–&gt; <code class="highlighter-rouge">Find and Install Target application (Frida server) in device</code></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">$ adb shell getprop ro.product.cpu.abi (To check architecture of device)</span>
</code></pre></div></div>
<p>Download the Frida Server script according to above command output from the following link: <a href="https://github.com/frida/frida/releases/">https://github.com/frida/frida/releases/</a></p>

<p>–&gt; <code class="highlighter-rouge">Push Frida Server to device</code></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">$ adb push frida-server-12.8.14-android-x86 /data/local/tmp</span>
<span class="s">$ adb shell chmod 777 /data/local/tmp/frida-server-12.8.14-android-x86</span>
</code></pre></div></div>
<p>–&gt; <code class="highlighter-rouge">Bypass SSL pinning &amp; Root Detection</code></p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">$ adb push fridascript.js /data/local/tmp</span>
<span class="s">$ adb shell /data/local/tmp/frida-server-12.8.14-android-x86 &amp; (Running frida server)</span>
<span class="s">$ frida-ps -u (Check running processes in device)</span>
<span class="s">$ objection –gadget com.ril.ajio explore → android sslpinning disable/android root</span>
<span class="s">disable(For bypassing Root Detection)</span>
</code></pre></div></div>
<h2>Chapter 5: Interactive Analysis </h2>

<p>Interactive Anaylysis can also be called as <strong>Ineteractive Application Security Assessment (IAST)</strong>. It is basically combination <strong>Static Application Security Assessment (SAST)</strong> and <strong>Dynamic Application Security Assessment (DAST)</strong>. In layman terms, <strong>DAST</strong> deals at interactive level .i.e at runtime level where the application is performing it’s functionality. Following is the list of methods that can used in <strong>DAST</strong> methodology:</p>
:ET